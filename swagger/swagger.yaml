openapi: 3.0.0
info:
  title: Admin Dashboard API
  version: 1.0.0
  description: API for User Authentication, Management, Products, and Password handling.

servers:
  - url: http://localhost:5000

tags:
  - name: Auth
    description: User authentication (register & login)
  - name: Users
    description: User management (admin access)
  - name: Products
    description: Product management (admin access)
  - name: Password
    description: Forgot, Reset, Change password

paths:

  /api/auth/register:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password]
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                role:
                  type: string
      responses:
        201:
          description: User registered successfully

  /api/auth/login:
    post:
      tags: [Auth]
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Login successful, returns token

  /api/users:
    get:
      tags: [Users]
      summary: Get all users (admin only)
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: search
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of users

  /api/users/{id}:
    get:
      tags: [Users]
      summary: Get user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        200:
          description: User data

    put:
      tags: [Users]
      summary: Update user (admin only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                role:
                  type: string
      security:
        - bearerAuth: []
      responses:
        200:
          description: Updated user

    delete:
      tags: [Users]
      summary: Delete user (admin only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        200:
          description: User deleted

  /api/products:
    get:
      tags: [Products]
      summary: Get all products (public)
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: search
          schema:
            type: string
      responses:
        200:
          description: List of products

    post:
      tags: [Products]
      summary: Create a new product (admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, description, price, category]
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                category:
                  type: string
                stock:
                  type: integer
      responses:
        201:
          description: Product created

  /api/products/{id}:
    get:
      tags: [Products]
      summary: Get product by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Product details

    put:
      tags: [Products]
      summary: Update a product (admin only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                category:
                  type: string
                stock:
                  type: integer
      responses:
        200:
          description: Product updated

    delete:
      tags: [Products]
      summary: Delete a product (admin only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        200:
          description: Product deleted

  /api/password/forgot:
    post:
      tags: [Password]
      summary: Send password reset link
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email:
                  type: string
      responses:
        200:
          description: Reset link sent

  /api/password/reset/{token}:
    post:
      tags: [Password]
      summary: Reset password with token
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [password]
              properties:
                password:
                  type: string
      responses:
        200:
          description: Password reset successful

  /api/password/change:
    put:
      tags: [Password]
      summary: Change password (logged-in user)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [currentPassword, newPassword]
              properties:
                currentPassword:
                  type: string
                newPassword:
                  type: string
      responses:
        200:
          description: Password changed

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
